[project]
name = "flake8-import-guard"
version = "1.2.0"
description = "Flake8 plugin to enforce import restrictions in Python projects."
authors = [{ name = "K' ", email = "51281148+K-dash@users.noreply.github.com" }]
requires-python = ">=3.9,<4"
readme = "README.md"
license = "MIT"
keywords = ["flake8", "plugin", "import", "linter"]
classifiers = [
    "Framework :: Flake8",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "flake8>=7.1.2,<8",
    "gitpython>=3.1.44,<4",
    "python-dotenv>=1.1.0,<2",
    "toml>=0.10.2,<0.11",
]

[project.urls]
Homepage = "https://qiita.com/inetcpl"
Repository = "https://github.com/K-dash/flake8-import-guard"

[project.entry-points."flake8.extension"]
CPE = "src.main:Flake8ImportGuard"

[dependency-groups]
dev = [
    "ruff>=0.11.2,<0.12",
    "pre-commit>=4.2.0,<5",
    "pytest>=8.3.5,<9",
    "pytest-cov>=6.0.0,<7",
    "python-semantic-release>=9.21.0,<10",
]

[tool.hatch.build.targets.sdist]
include = ["src"]

[tool.hatch.build.targets.wheel]
include = ["src"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = 'tests'
pythonpath = "."
addopts = '-p no:warnings'                         # disable pytest warnings
log_format = '%(name)s %(levelname)s: %(message)s'

[tool.ruff]
line-length = 80

[tool.ruff.lint]
# I: isort
# F: Pyflakes
# E: Pycodestyle Error
# W: Pycodestyle Warning
# P: Pylint
# PT: flake8-pytest-style
preview = true
select = ['I', 'F', 'W', 'PL', 'PT']

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 120

[tool.ruff.format]
preview = true
quote-style = 'double'
docstring-code-format = true

# [tool.flake8-import-guard]
# forbidden_imports = ["load_dotenv", "subprocess", "dataclasses"]

[tool.semantic_release]
version_variable = "src/__init__.py:__version__"
version_toml = ["pyproject.toml:project.version"]
branch = "main"
commit_version = true
commit_message = "chore(release): {version} [skip ci]"
commit_parser = "conventional"
tag_format = "v{version}"
upload_to_pypi = false
upload_to_release = false
commit = true
tag = true
push = true

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"

[[tool.semantic_release.changelog.sections]]
type = "feat"
section = "Features"
hidden = false

[[tool.semantic_release.changelog.sections]]
type = "fix"
section = "Bug Fixes"
hidden = false

[[tool.semantic_release.changelog.sections]]
type = "docs"
section = "Documentation"
hidden = false

[[tool.semantic_release.changelog.sections]]
type = "style"
section = "Styles"
hidden = true

[[tool.semantic_release.changelog.sections]]
type = "refactor"
section = "Refactoring"
hidden = false

[[tool.semantic_release.changelog.sections]]
type = "perf"
section = "Performance Improvements"
hidden = false

[[tool.semantic_release.changelog.sections]]
type = "test"
section = "Tests"
hidden = true

[[tool.semantic_release.changelog.sections]]
type = "ci"
section = "Continuous Integration"
hidden = false

[[tool.semantic_release.changelog.sections]]
type = "chore"
section = "Miscellaneous"
hidden = true

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*.tar.gz", "dist/*.whl"]
